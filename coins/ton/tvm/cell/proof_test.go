/**
Authorï¼š https://github.com/xssnick/tonutils-go
*/

package cell

import (
	"encoding/hex"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
)

func CheckProofTest(proof *Cell, hash []byte) bool {
	err := CheckProof(proof, hash)
	return err == nil
}
func TestProofCheck(t *testing.T) {
	accountProof, _ := hex.DecodeString("b5ee9c7201021f010003a8000946036ab76d71145811e08f772ec93c4159c29ca7512d3e4688b75b08382d47abd5f5016f01245b9023afe2ffffff1100ffffffff0000000000000000019edf8b0000000163e3852500001ff3a6dcc444019edf886002030405284801014b37adeb84aafb46d91bae8be1281bd67f880c77aae62b6c1197f3fa67794dd7000128480101200fd8b67011b149538cae7ab1be3a8d6530f193dceb373b10ed11f9a07ead70016e22330000000000000000ffffffffffffffff81fe7ee770c0c126e82806072455cc26aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac233e10144057f6b7e08090a0b28480101a5a7d24057d8643b2527709d986cda3846adcb3eddc32d28ec21f69e17dbaaef0001284801012c00905b7ddb998b2200aecebfb52be3f1ef91aaffb836fd23a62f8511102a5e000e2848010113ac849254b1bc695b02d59ade963543d059836ee907fd8fb1c400595532de9600022201200c0d22bf00019ced53bb00062886600003fe74d9b040880000ff8884c2e4200cf5af64662e33597f9a0d8ae069c0fdf8908a94a5f256610b1bd893a67b7c03d76cf464e75a15cd7de96547731f5c49b5cf86cdf3475efc741b656f293ce3755840fbf0be1d1e28480101b20e36a3b36a4cdee601106c642e90718b0a58daf200753dbb3189f956b494b600012202d80e0f2848010124d21cf7ae96b1c55a1230e823db0317ce24ec33e3bf2585c79605684304faf20007220120101128480101fd78695ffd58402e209cb0b060c95b1a8a83dae389c7eac9554a3c086e52b898000722012012132848010120681854d1d5bdeca272e3c85af6f487f0b6845017253f2a14590939d625ccf2000c220120141528480101fb995c727bab36d7e0b97b3b4330bd41f125d5cf1ab5d7ee9d32ed5910566153000828480101a803208fc3523afed9a219f83157922090cbf14019d0bee0e2523cd35f122896000522012016172201201819284801018d65a4182ee8c6bb9016165e49f913807af3190dcfa61eb27c258d7c7d3dcb9900032201201a1b28480101dc56084563cc28588672914d638ea338abbe52d62660a9db136484469427634900090101201c28480101c1f3c2ada12bd901bba1552c0c090cc3989649807c2b764d02548c1f664c20890007001ac400000002000000000000002e28480101d3613ca05307e6ac0ef5427c98496c512bba2acc609ce7dfa90786801d80b5fe0019284801015ceb19b906fa6ba5df69eaaf5a206d31b200f9fd861c2db436deb910e2f44cbb0011")
	cl, err := FromBOC(accountProof)
	if err != nil {
		t.Fatal(err)
	}

	hash, _ := hex.DecodeString("6AB76D71145811E08F772EC93C4159C29CA7512D3E4688B75B08382D47ABD5F5")
	assert.True(t, CheckProofTest(cl, hash))
}

func TestProofCreate(t *testing.T) {
	accountProof, _ := hex.DecodeString("b5ee9c7201021b010003b2000271c000ab558f4db84fd31f61a273535c670c091ffc619b1cdbbe5769a0bf28d3b8fea236865b4312ab35600000625f2d741f0d6773533c74d34001020114ff00f4a413f4bcf2c80b0301510000002629a9a317c878acda0aa0cfacdab9bff8bca840e7d10d8a41d1ee96caf7ac645016af94dfc0160201200405020148060704f8f28308d71820d31fd31fd31f02f823bbf264ed44d0d31fd31fd3fff404d15143baf2a15151baf2a205f901541064f910f2a3f80024a4c8cb1f5240cb1f5230cbff5210f400c9ed54f80f01d30721c0009f6c519320d74a96d307d402fb00e830e021c001e30021c002e30001c0039130e30d03a4c8cb1f12cb1fcbff1213141502e6d001d0d3032171b0925f04e022d749c120925f04e002d31f218210706c7567bd22821064737472bdb0925f05e003fa403020fa4401c8ca07cbffc9d0ed44d0810140d721f404305c810108f40a6fa131b3925f07e005d33fc8258210706c7567ba923830e30d03821064737472ba925f06e30d08090201200a0b007801fa00f40430f8276f2230500aa121bef2e0508210706c7567831eb17080185004cb0526cf1658fa0219f400cb6917cb1f5260cb3f20c98040fb0006008a5004810108f45930ed44d0810140d720c801cf16f400c9ed540172b08e23821064737472831eb17080185005cb055003cf1623fa0213cb6acb1fcb3fc98040fb00925f03e20201200c0d0059bd242b6f6a2684080a06b90fa0218470d4080847a4937d29910ce6903e9ff9837812801b7810148987159f31840201580e0f0011b8c97ed44d0d70b1f8003db29dfb513420405035c87d010c00b23281f2fff274006040423d029be84c6002012010110019adce76a26840206b90eb85ffc00019af1df6a26840106b90eb858fc0006ed207fa00d4d422f90005c8ca0715cbffc9d077748018c8cb05cb0222cf165005fa0214cb6b12ccccc973fb00c84014810108f451f2a7020070810108d718fa00d33fc8542047810108f451f2a782106e6f746570748018c8cb05cb025006cf165004fa0214cb6a12cb1fcb3fc973fb0002006c810108d718fa00d33f305224810108f459f2a782106473747270748018c8cb05cb025005cf165003fa0213cb6acb1f12cb3fc973fb00000af400c9ed5402057fc01817180042bf8e1b0bc5dfcda03e92f9b4b9ffc438595770c0686d91bde674ad610dba9bc66e020148191a0041bf0f895e56f2933fdc5f7c21bc29292fdf0415b7368b9a3eef5bd23ced3021278a0041bf16fc68f92304fb493ca52b5ddefabc42a2131f3e45442b1f2ae45156b2972bea")
	cl, err := FromBOC(accountProof)
	if err != nil {
		t.Fatal(err)
	}

	sk := CreateProofSkeleton()
	sk.ProofRef(0).ProofRef(0).ProofRef(0).ProofRef(1)

	prf, err := cl.CreateProof(sk)
	if err != nil {
		t.Fatal(err)
	}

	hash2, _ := hex.DecodeString("570AE6006A10197ACF045C1EABE79FE6E633DA311EC51B5AC11145A4D82E4B37")
	assert.True(t, CheckProofTest(prf, hash2))
}

func TestProofOfProofCreate2(t *testing.T) {
	proof, _ := hex.DecodeString("")
	cl, err := FromBOC(proof)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, "bf76eed0ac2f54e30c93c36e587a6dacd4526f45dcbf01a476c149f1991cb78a", hex.EncodeToString(cl.Hash()))
}

func TestCheckCascadeProof(t *testing.T) {
	accountProof, _ := hex.DecodeString("b5ee9c72e102080100018200004c009800e4014c019801e4027403040946036fc7808e1921ac8352cc61b1f66c6e3f08c44f17b26c9619329dc637875af5fd00040129460327fcb2cceef7159510bb08f96e037f910a38c1723d08b1fefbba43d73e660e3d000c026946036ab76d71145811e08f772ec93c4159c29ca7512d3e4688b75b08382d47abd5f5016f03e45b9023afe2ffffff1100ffffffff0000000000000000019edf8b0000000163e3852500001ff3a6dcc444019edf886004050607284801014b37adeb84aafb46d91bae8be1281bd67f880c77aae62b6c1197f3fa67794dd7000128480101200fd8b67011b149538cae7ab1be3a8d6530f193dceb373b10ed11f9a07ead70016ea88c0105d028304ac0bfbb9602c7a46cc4951eeaf6ff458218a6fd2dc128a48a68b80feb42f99b29a278cce52c97d864e1c6c8dc731758fc051799448dda8e1dbc7618ab000f0001688c01038bfecc10254930f689c92ecc4d36fc69792baec3773ea177362246dc57b49486c3d6a8022f8fe7797faf3b9076cc6779ba21a4498876dab72d2638d92e9435fa001b000aa429044b")
	cl, err := FromBOC(accountProof)
	if err != nil {
		t.Fatal(err)
	}

	hash, _ := hex.DecodeString("6FC7808E1921AC8352CC61B1F66C6E3F08C44F17B26C9619329DC637875AF5FD")
	cl, err = UnwrapProof(cl, hash)
	if err != nil {
		t.Fatal(err)
	}

	hash, _ = hex.DecodeString("27FCB2CCEEF7159510BB08F96E037F910A38C1723D08B1FEFBBA43D73E660E3D")
	cl, err = UnwrapProof(cl, hash)
	if err != nil {
		t.Fatal(err)
	}

	hash, _ = hex.DecodeString("6AB76D71145811E08F772EC93C4159C29CA7512D3E4688B75B08382D47ABD5F5")
	cl, err = UnwrapProof(cl, hash)
	if err != nil {
		t.Fatal(err)
	}
}

func TestProofCreateLevel3(t *testing.T) {
	accountProof, _ := hex.DecodeString("b5ee9c724102090100017e0009460327fcb2cceef7159510bb08f96e037f910a38c1723d08b1fefbba43d73e660e3d000c012946036ab76d71145811e08f772ec93c4159c29ca7512d3e4688b75b08382d47abd5f5016f02645b9023afe2ffffff1100ffffffff0000000000000000019edf8b0000000163e3852500001ff3a6dcc444019edf886003040506284801014b37adeb84aafb46d91bae8be1281bd67f880c77aae62b6c1197f3fa67794dd7000128480101200fd8b67011b149538cae7ab1be3a8d6530f193dceb373b10ed11f9a07ead70016e22330000000000000000ffffffffffffffff81fe7ee770c0c126e8280708688c01038bfecc10254930f689c92ecc4d36fc69792baec3773ea177362246dc57b49486c3d6a8022f8fe7797faf3b9076cc6779ba21a4498876dab72d2638d92e9435fa001b000a28480101a5a7d24057d8643b2527709d986cda3846adcb3eddc32d28ec21f69e17dbaaef0001284801012c00905b7ddb998b2200aecebfb52be3f1ef91aaffb836fd23a62f8511102a5e000e2ec12517")
	cl, err := FromBOC(accountProof)
	if err != nil {
		t.Fatal(err)
	}

	hash, _ := hex.DecodeString("27FCB2CCEEF7159510BB08F96E037F910A38C1723D08B1FEFBBA43D73E660E3D")
	assert.True(t, CheckProofTest(cl, hash))

	sk := CreateProofSkeleton()
	sk.ProofRef(0).ProofRef(0).ProofRef(1)

	prf, err := cl.CreateProof(sk)
	if err != nil {
		t.Fatal(err)
	}

	hash2, _ := hex.DecodeString("6FC7808E1921AC8352CC61B1F66C6E3F08C44F17B26C9619329DC637875AF5FD")
	assert.True(t, CheckProofTest(prf, hash2))
}

func TestProofCreateLevel2(t *testing.T) {
	accountProof, _ := hex.DecodeString("b5ee9c7201021f010003a8000946036ab76d71145811e08f772ec93c4159c29ca7512d3e4688b75b08382d47abd5f5016f01245b9023afe2ffffff1100ffffffff0000000000000000019edf8b0000000163e3852500001ff3a6dcc444019edf886002030405284801014b37adeb84aafb46d91bae8be1281bd67f880c77aae62b6c1197f3fa67794dd7000128480101200fd8b67011b149538cae7ab1be3a8d6530f193dceb373b10ed11f9a07ead70016e22330000000000000000ffffffffffffffff81fe7ee770c0c126e82806072455cc26aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac233e10144057f6b7e08090a0b28480101a5a7d24057d8643b2527709d986cda3846adcb3eddc32d28ec21f69e17dbaaef0001284801012c00905b7ddb998b2200aecebfb52be3f1ef91aaffb836fd23a62f8511102a5e000e2848010113ac849254b1bc695b02d59ade963543d059836ee907fd8fb1c400595532de9600022201200c0d22bf00019ced53bb00062886600003fe74d9b040880000ff8884c2e4200cf5af64662e33597f9a0d8ae069c0fdf8908a94a5f256610b1bd893a67b7c03d76cf464e75a15cd7de96547731f5c49b5cf86cdf3475efc741b656f293ce3755840fbf0be1d1e28480101b20e36a3b36a4cdee601106c642e90718b0a58daf200753dbb3189f956b494b600012202d80e0f2848010124d21cf7ae96b1c55a1230e823db0317ce24ec33e3bf2585c79605684304faf20007220120101128480101fd78695ffd58402e209cb0b060c95b1a8a83dae389c7eac9554a3c086e52b898000722012012132848010120681854d1d5bdeca272e3c85af6f487f0b6845017253f2a14590939d625ccf2000c220120141528480101fb995c727bab36d7e0b97b3b4330bd41f125d5cf1ab5d7ee9d32ed5910566153000828480101a803208fc3523afed9a219f83157922090cbf14019d0bee0e2523cd35f122896000522012016172201201819284801018d65a4182ee8c6bb9016165e49f913807af3190dcfa61eb27c258d7c7d3dcb9900032201201a1b28480101dc56084563cc28588672914d638ea338abbe52d62660a9db136484469427634900090101201c28480101c1f3c2ada12bd901bba1552c0c090cc3989649807c2b764d02548c1f664c20890007001ac400000002000000000000002e28480101d3613ca05307e6ac0ef5427c98496c512bba2acc609ce7dfa90786801d80b5fe0019284801015ceb19b906fa6ba5df69eaaf5a206d31b200f9fd861c2db436deb910e2f44cbb0011")
	cl, err := FromBOC(accountProof)
	if err != nil {
		t.Fatal(err)
	}

	hash, _ := hex.DecodeString("6AB76D71145811E08F772EC93C4159C29CA7512D3E4688B75B08382D47ABD5F5")
	assert.True(t, CheckProofTest(cl, hash))

	sk := CreateProofSkeleton()
	sk.ProofRef(0).ProofRef(2)

	prf, err := cl.CreateProof(sk)
	if err != nil {
		t.Fatal(err)
	}

	hash2, _ := hex.DecodeString("27FCB2CCEEF7159510BB08F96E037F910A38C1723D08B1FEFBBA43D73E660E3D")
	assert.True(t, CheckProofTest(prf, hash2))
}

func TestProofDictKey(t *testing.T) {
	d := NewDict(64)
	for i := 0; i < 1000; i++ {
		_ = d.SetIntKey(big.NewInt(int64(i)), BeginCell().MustStoreRef(BeginCell().MustStoreRef(BeginCell().MustStoreUInt(uint64(i*3), 128).EndCell()).EndCell()).EndCell())
	}
	dHash := d.AsCell().Hash()

	sk := CreateProofSkeleton()
	_, leafProof, err := d.LoadValueWithProof(BeginCell().MustStoreUInt(777, 64).EndCell(), sk)
	if err != nil {
		t.Fatal(err)
	}
	leafProof.SetRecursive()

	_, _, err = d.LoadValueWithProof(BeginCell().MustStoreUInt(333, 64).EndCell(), sk)
	if err != nil {
		t.Fatal(err)
	}

	_, leafProof, err = d.LoadValueWithProof(BeginCell().MustStoreUInt(111, 64).EndCell(), sk)
	if err != nil {
		t.Fatal(err)
	}
	leafProof.SetRecursive()

	proof, err := d.AsCell().CreateProof(sk)
	if err != nil {
		t.Fatal(err)
	}

	proofBody, err := UnwrapProof(proof, dHash)
	if err != nil {
		t.Fatal(err)
	}

	dp := proofBody.AsDict(64)
	vl, err := dp.LoadValueByIntKey(big.NewInt(777))
	if err != nil {
		t.Fatal(err)
	}
	if vl.MustLoadRef().MustLoadRef().MustLoadUInt(128) != 777*3 {
		t.Fatal("incorrect val 1")
	}

	vl3, err := dp.LoadValueByIntKey(big.NewInt(333))
	if err != nil {
		t.Fatal(err)
	}
	if !vl3.MustLoadRef().IsSpecial() {
		t.Fatal("should be pruned")
	}

	vl2, err := dp.LoadValueByIntKey(big.NewInt(111))
	if err != nil {
		t.Fatal(err)
	}
	if vl2.MustLoadRef().MustLoadRef().MustLoadUInt(128) != 111*3 {
		t.Fatal("incorrect val 2")
	}

	_, err = dp.LoadValueByIntKey(big.NewInt(2222))
	if err == nil {
		t.Fatal("should not be accessible")
	}
}
