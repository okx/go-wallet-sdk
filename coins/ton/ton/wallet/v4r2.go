/**
Authorï¼š https://github.com/xssnick/tonutils-go
*/

package wallet

import (
	"context"
	"errors"
	"fmt"
	"github.com/okx/go-wallet-sdk/coins/ton/tlb"
	"github.com/okx/go-wallet-sdk/coins/ton/tvm/cell"
	"time"
)

// https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletContractV4.js
const _V4R1CodeHex

// https://github.com/toncenter/tonweb/blob/master/src/contract/wallet/WalletSources.md#revision-2-3
const _V4R2CodeHex

type SpecV4R2 struct {
	SpecRegular
	SpecSeqno
}

func (s *SpecV4R2) BuildMessage(ctx context.Context, _ bool, _ bool /*_ *ton.BlockIDExt,*/, messages []*Message) (_ *cell.Cell, err error) {
	// TODO: remove block, now it is here for backwards compatibility

	if len(messages) > 4 {
		return nil, errors.New("for this type of wallet max 4 messages can be sent in the same time")
	}

	seq, err := s.seqnoFetcher(ctx, s.wallet.subwallet)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch seqno: %w", err)
	}
	unix := uint64(s.expireAt)
	if unix == 0 {
		unix = uint64(timeNow().Add(600 * time.Second).UTC().Unix())
	}
	payload := cell.BeginCell().MustStoreUInt(uint64(s.wallet.subwallet), 32).
		MustStoreUInt(unix, 32).
		MustStoreUInt(uint64(seq), 32).
		MustStoreInt(0, 8) // op

	for i, message := range messages {
		intMsg, err := tlb.ToCell(message.InternalMessage)
		if err != nil {
			return nil, fmt.Errorf("failed to convert internal message %d to cell: %w", i, err)
		}

		payload.MustStoreUInt(uint64(message.Mode), 8).MustStoreRef(intMsg)
	}

	var sign []byte
	if s.wallet.key == nil {
		sign = make([]byte, 64)
	} else {
		sign = payload.EndCell().Sign(s.wallet.key)
	}
	msg := cell.BeginCell().MustStoreSlice(sign, 512).MustStoreBuilder(payload).EndCell()

	return msg, nil
}

// TODO: implement plugins
