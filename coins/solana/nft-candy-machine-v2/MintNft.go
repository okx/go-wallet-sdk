// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine_v2

import (
	"errors"

	"github.com/emresenyuva/go-wallet-sdk/coins/solana/base"
)

// MintNft is the `mintNft` instruction.
type MintNft struct {
	CreatorBump *uint8

	// [0] = [WRITE] candyMachine
	//
	// [1] = [] candyMachineCreator
	//
	// [2] = [SIGNER] payer
	//
	// [3] = [WRITE] wallet
	//
	// [4] = [WRITE] metadata
	//
	// [5] = [WRITE] mint
	//
	// [6] = [SIGNER] mintAuthority
	//
	// [7] = [SIGNER] updateAuthority
	//
	// [8] = [WRITE] masterEdition
	//
	// [9] = [] tokenMetadataProgram
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] systemProgram
	//
	// [12] = [] rent
	//
	// [13] = [] clock
	//
	// [14] = [] recentBlockhashes
	//
	// [15] = [] instructionSysvarAccount
	base.AccountMetaSlice `bin:"-"`
}

// NewMintNftInstructionBuilder creates a new `MintNft` instruction builder.
func NewMintNftInstructionBuilder() *MintNft {
	nd := &MintNft{
		AccountMetaSlice: make(base.AccountMetaSlice, 16),
	}
	return nd
}

// SetCreatorBump sets the "creatorBump" parameter.
func (inst *MintNft) SetCreatorBump(creatorBump uint8) *MintNft {
	inst.CreatorBump = &creatorBump
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *MintNft) SetCandyMachineAccount(candyMachine base.PublicKey) *MintNft {
	inst.AccountMetaSlice[0] = base.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *MintNft) GetCandyMachineAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCandyMachineCreatorAccount sets the "candyMachineCreator" account.
func (inst *MintNft) SetCandyMachineCreatorAccount(candyMachineCreator base.PublicKey) *MintNft {
	inst.AccountMetaSlice[1] = base.Meta(candyMachineCreator)
	return inst
}

// GetCandyMachineCreatorAccount gets the "candyMachineCreator" account.
func (inst *MintNft) GetCandyMachineCreatorAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintNft) SetPayerAccount(payer base.PublicKey) *MintNft {
	inst.AccountMetaSlice[2] = base.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintNft) GetPayerAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWalletAccount sets the "wallet" account.
func (inst *MintNft) SetWalletAccount(wallet base.PublicKey) *MintNft {
	inst.AccountMetaSlice[3] = base.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *MintNft) GetWalletAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *MintNft) SetMetadataAccount(metadata base.PublicKey) *MintNft {
	inst.AccountMetaSlice[4] = base.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *MintNft) GetMetadataAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *MintNft) SetMintAccount(mint base.PublicKey) *MintNft {
	inst.AccountMetaSlice[5] = base.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintNft) GetMintAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *MintNft) SetMintAuthorityAccount(mintAuthority base.PublicKey) *MintNft {
	inst.AccountMetaSlice[6] = base.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *MintNft) GetMintAuthorityAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUpdateAuthorityAccount sets the "updateAuthority" account.
func (inst *MintNft) SetUpdateAuthorityAccount(updateAuthority base.PublicKey) *MintNft {
	inst.AccountMetaSlice[7] = base.Meta(updateAuthority).SIGNER()
	return inst
}

// GetUpdateAuthorityAccount gets the "updateAuthority" account.
func (inst *MintNft) GetUpdateAuthorityAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *MintNft) SetMasterEditionAccount(masterEdition base.PublicKey) *MintNft {
	inst.AccountMetaSlice[8] = base.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *MintNft) GetMasterEditionAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintNft) SetTokenMetadataProgramAccount(tokenMetadataProgram base.PublicKey) *MintNft {
	inst.AccountMetaSlice[9] = base.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintNft) GetTokenMetadataProgramAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintNft) SetTokenProgramAccount(tokenProgram base.PublicKey) *MintNft {
	inst.AccountMetaSlice[10] = base.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintNft) GetTokenProgramAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintNft) SetSystemProgramAccount(systemProgram base.PublicKey) *MintNft {
	inst.AccountMetaSlice[11] = base.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintNft) GetSystemProgramAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetRentAccount sets the "rent" account.
func (inst *MintNft) SetRentAccount(rent base.PublicKey) *MintNft {
	inst.AccountMetaSlice[12] = base.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintNft) GetRentAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetClockAccount sets the "clock" account.
func (inst *MintNft) SetClockAccount(clock base.PublicKey) *MintNft {
	inst.AccountMetaSlice[13] = base.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *MintNft) GetClockAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetRecentBlockhashesAccount sets the "recentBlockhashes" account.
func (inst *MintNft) SetRecentBlockhashesAccount(recentBlockhashes base.PublicKey) *MintNft {
	inst.AccountMetaSlice[14] = base.Meta(recentBlockhashes)
	return inst
}

// GetRecentBlockhashesAccount gets the "recentBlockhashes" account.
func (inst *MintNft) GetRecentBlockhashesAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetInstructionSysvarAccountAccount sets the "instructionSysvarAccount" account.
func (inst *MintNft) SetInstructionSysvarAccountAccount(instructionSysvarAccount base.PublicKey) *MintNft {
	inst.AccountMetaSlice[15] = base.Meta(instructionSysvarAccount)
	return inst
}

// GetInstructionSysvarAccountAccount gets the "instructionSysvarAccount" account.
func (inst *MintNft) GetInstructionSysvarAccountAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst MintNft) Build() *Instruction {
	return &Instruction{BaseVariant: base.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintNft,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintNft) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintNft) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CreatorBump == nil {
			return errors.New("CreatorBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CandyMachineCreator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.RecentBlockhashes is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.InstructionSysvarAccount is not set")
		}
	}
	return nil
}

func (obj MintNft) MarshalWithEncoder(encoder *base.Encoder) (err error) {
	// Serialize `CreatorBump` param:
	err = encoder.Encode(obj.CreatorBump)
	if err != nil {
		return err
	}
	return nil
}

// NewMintNftInstruction declares a new MintNft instruction with the provided parameters and accounts.
func NewMintNftInstruction(
	// Parameters:
	creatorBump uint8,
	// Accounts:
	candyMachine base.PublicKey,
	candyMachineCreator base.PublicKey,
	payer base.PublicKey,
	wallet base.PublicKey,
	metadata base.PublicKey,
	mint base.PublicKey,
	mintAuthority base.PublicKey,
	updateAuthority base.PublicKey,
	masterEdition base.PublicKey,
	tokenMetadataProgram base.PublicKey,
	tokenProgram base.PublicKey,
	systemProgram base.PublicKey,
	rent base.PublicKey,
	clock base.PublicKey,
	recentBlockhashes base.PublicKey,
	instructionSysvarAccount base.PublicKey) *MintNft {
	return NewMintNftInstructionBuilder().
		SetCreatorBump(creatorBump).
		SetCandyMachineAccount(candyMachine).
		SetCandyMachineCreatorAccount(candyMachineCreator).
		SetPayerAccount(payer).
		SetWalletAccount(wallet).
		SetMetadataAccount(metadata).
		SetMintAccount(mint).
		SetMintAuthorityAccount(mintAuthority).
		SetUpdateAuthorityAccount(updateAuthority).
		SetMasterEditionAccount(masterEdition).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetClockAccount(clock).
		SetRecentBlockhashesAccount(recentBlockhashes).
		SetInstructionSysvarAccountAccount(instructionSysvarAccount)
}
