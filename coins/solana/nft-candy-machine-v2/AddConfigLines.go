// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine_v2

import (
	"errors"

	"github.com/emresenyuva/go-wallet-sdk/coins/solana/base"
)

// AddConfigLines is the `addConfigLines` instruction.
type AddConfigLines struct {
	Index       *uint32
	ConfigLines *[]ConfigLine

	// [0] = [WRITE] candyMachine
	//
	// [1] = [SIGNER] authority
	base.AccountMetaSlice `bin:"-"`
}

// NewAddConfigLinesInstructionBuilder creates a new `AddConfigLines` instruction builder.
func NewAddConfigLinesInstructionBuilder() *AddConfigLines {
	nd := &AddConfigLines{
		AccountMetaSlice: make(base.AccountMetaSlice, 2),
	}
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *AddConfigLines) SetIndex(index uint32) *AddConfigLines {
	inst.Index = &index
	return inst
}

// SetConfigLines sets the "configLines" parameter.
func (inst *AddConfigLines) SetConfigLines(configLines []ConfigLine) *AddConfigLines {
	inst.ConfigLines = &configLines
	return inst
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *AddConfigLines) SetCandyMachineAccount(candyMachine base.PublicKey) *AddConfigLines {
	inst.AccountMetaSlice[0] = base.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *AddConfigLines) GetCandyMachineAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *AddConfigLines) SetAuthorityAccount(authority base.PublicKey) *AddConfigLines {
	inst.AccountMetaSlice[1] = base.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *AddConfigLines) GetAuthorityAccount() *base.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst AddConfigLines) Build() *Instruction {
	return &Instruction{BaseVariant: base.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddConfigLines,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddConfigLines) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddConfigLines) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
		if inst.ConfigLines == nil {
			return errors.New("ConfigLines parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (obj AddConfigLines) MarshalWithEncoder(encoder *base.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `ConfigLines` param:
	err = encoder.Encode(obj.ConfigLines)
	if err != nil {
		return err
	}
	return nil
}

// NewAddConfigLinesInstruction declares a new AddConfigLines instruction with the provided parameters and accounts.
func NewAddConfigLinesInstruction(
	// Parameters:
	index uint32,
	configLines []ConfigLine,
	// Accounts:
	candyMachine base.PublicKey,
	authority base.PublicKey) *AddConfigLines {
	return NewAddConfigLinesInstructionBuilder().
		SetIndex(index).
		SetConfigLines(configLines).
		SetCandyMachineAccount(candyMachine).
		SetAuthorityAccount(authority)
}
