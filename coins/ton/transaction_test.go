package ton

import (
	"crypto/ed25519"
	"encoding/hex"
	"github.com/okx/go-wallet-sdk/coins/ton/ton/wallet"
	"testing"

	"github.com/stretchr/testify/assert"
)

var (
	expireAt = int64(1719482102)
)

func TestTransfer(t *testing.T) {
	//Data te6cckEBAQEAKwAAUQAAAAApqaMXESxRf3avxJCx2HaBkMoZwfu935e57ya0WDPIwb7UQMxAY1OUUA==
	//Code te6cckECFAEAAtQAART/APSkE/S88sgLAQIBIAIDAgFIBAUE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8GBwgJAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNCgsCASAMDQBu0gf6ANTUIvkABcjKBxXL/8nQd3SAGMjLBcsCIs8WUAX6AhTLaxLMzMlz+wDIQBSBAQj0UfKnAgBwgQEI1xj6ANM/yFQgR4EBCPRR8qeCEG5vdGVwdIAYyMsFywJQBs8WUAT6AhTLahLLH8s/yXP7AAIAbIEBCNcY+gDTPzBSJIEBCPRZ8qeCEGRzdHJwdIAYyMsFywJQBc8WUAP6AhPLassfEss/yXP7AAAK9ADJ7VQAeAH6APQEMPgnbyIwUAqhIb7y4FCCEHBsdWeDHrFwgBhQBMsFJs8WWPoCGfQAy2kXyx9SYMs/IMmAQPsABgCKUASBAQj0WTDtRNCBAUDXIMgBzxb0AMntVAFysI4jghBkc3Rygx6xcIAYUAXLBVADzxYj+gITy2rLH8s/yYBA+wCSXwPiAgEgDg8AWb0kK29qJoQICga5D6AhhHDUCAhHpJN9KZEM5pA+n/mDeBKAG3gQFImHFZ8xhAIBWBARABG4yX7UTQ1wsfgAPbKd+1E0IEBQNch9AQwAsjKB8v/ydABgQEI9ApvoTGACASASEwAZrc52omhAIGuQ64X/wAAZrx32omhAEGuQ64WPwGb/qfE=
	seed, _ := hex.DecodeString("961e76f2e06f689b14002118a96d4a075fdb14f4e82aa3f150a5bd519aa077e9")
	to := "UQC6QJ31Bv_hjmsoaUjRmpZYqj9NXbBbvufCNycnc0gjReqR"
	amount := "100000000"
	comment := ""
	seqno := uint32(0)
	pubKey := ed25519.NewKeyFromSeed(seed).Public().(ed25519.PublicKey)
	signedTx, err := Transfer(seed, pubKey, to, amount, comment, seqno, expireAt, 3, false, wallet.V4R2)
	assert.Nil(t, err)
	expect := "te6cckECFwEAA6wAA+OIATH7WDPNUXpzvwGS03a5pRDqWtbShlAV8mjFhYUidT9MEYyu6cZSXcE0TVy6ZQSUC8FA6Q5UQLAzYT0q9TCi1WEDvUWxNF7hVnAhFhhds+sryS4VzMWAKMMbYIxpiIrbu2HFNTRi7M+m3sAAAAAAAHABAgMBFP8A9KQT9LzyyAsEAFEAAAAAKamjFxEsUX92r8SQsdh2gZDKGcH7vd+Xue8mtFgzyMG+1EDMQABoQgBdIE76g3/wxzWUNKRozUssVR+mrtgt33PhG5OTuaQRoqAvrwgAAAAAAAAAAAAAAAAAAAIBIAUGAgFIBwgE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8JCgsMAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNDQ4CASAPEABu0gf6ANTUIvkABcjKBxXL/8nQd3SAGMjLBcsCIs8WUAX6AhTLaxLMzMlz+wDIQBSBAQj0UfKnAgBwgQEI1xj6ANM/yFQgR4EBCPRR8qeCEG5vdGVwdIAYyMsFywJQBs8WUAT6AhTLahLLH8s/yXP7AAIAbIEBCNcY+gDTPzBSJIEBCPRZ8qeCEGRzdHJwdIAYyMsFywJQBc8WUAP6AhPLassfEss/yXP7AAAK9ADJ7VQAeAH6APQEMPgnbyIwUAqhIb7y4FCCEHBsdWeDHrFwgBhQBMsFJs8WWPoCGfQAy2kXyx9SYMs/IMmAQPsABgCKUASBAQj0WTDtRNCBAUDXIMgBzxb0AMntVAFysI4jghBkc3Rygx6xcIAYUAXLBVADzxYj+gITy2rLH8s/yYBA+wCSXwPiAgEgERIAWb0kK29qJoQICga5D6AhhHDUCAhHpJN9KZEM5pA+n/mDeBKAG3gQFImHFZ8xhAIBWBMUABG4yX7UTQ1wsfgAPbKd+1E0IEBQNch9AQwAsjKB8v/ydABgQEI9ApvoTGACASAVFgAZrc52omhAIGuQ64X/wAAZrx32omhAEGuQ64WPwCaI0B4="
	assert.Equal(t, expect, signedTx.Tx)
	assert.Equal(t, "ec6dedd3645292f3415ff2072bf495bb6531c12c61a5a86bf8f09c5127422601", signedTx.Hash)
}

func TestTransfer2(t *testing.T) {
	seed, _ := hex.DecodeString("961e76f2e06f689b14002118a96d4a075fdb14f4e82aa3f150a5bd519aa077e2")
	to := "UQC6QJ31Bv_hjmsoaUjRmpZYqj9NXbBbvufCNycnc0gjReqR"
	amount := "10000"
	comment := ""
	seqno := uint32(0)
	pubKey := ed25519.NewKeyFromSeed(seed).Public().(ed25519.PublicKey)
	signedTx, err := Transfer(seed, pubKey, to, amount, comment, seqno, expireAt, 3, false, wallet.V4R2)
	assert.Nil(t, err)
	expect := "te6cckECFwEAA6oAA+OIAKR4w+Ra92rxd7NkYekkw/qWVVV/gMAUcSSMvEJ3Qn/GEYnpj8dYQpnru9Xoofh2mmV9dy+EO78HGlvBQ9tX6Ri5avIuLbrMqDN/mkSe4bNLSP9zJNEMciXdjELNqaNNYuGFNTRi7M+m3sAAAAAAAHABAgMBFP8A9KQT9LzyyAsEAFEAAAAAKamjF9Nb8UAZZyMmw8R9+HT3ASp834+WtVDTcVEDVTRvrfJYQABkQgBdIE76g3/wxzWUNKRozUssVR+mrtgt33PhG5OTuaQRopE4gAAAAAAAAAAAAAAAAAACASAFBgIBSAcIBPjygwjXGCDTH9Mf0x8C+CO78mTtRNDTH9Mf0//0BNFRQ7ryoVFRuvKiBfkBVBBk+RDyo/gAJKTIyx9SQMsfUjDL/1IQ9ADJ7VT4DwHTByHAAJ9sUZMg10qW0wfUAvsA6DDgIcAB4wAhwALjAAHAA5Ew4w0DpMjLHxLLH8v/CQoLDALm0AHQ0wMhcbCSXwTgItdJwSCSXwTgAtMfIYIQcGx1Z70ighBkc3RyvbCSXwXgA/pAMCD6RAHIygfL/8nQ7UTQgQFA1yH0BDBcgQEI9ApvoTGzkl8H4AXTP8glghBwbHVnupI4MOMNA4IQZHN0crqSXwbjDQ0OAgEgDxAAbtIH+gDU1CL5AAXIygcVy//J0Hd0gBjIywXLAiLPFlAF+gIUy2sSzMzJc/sAyEAUgQEI9FHypwIAcIEBCNcY+gDTP8hUIEeBAQj0UfKnghBub3RlcHSAGMjLBcsCUAbPFlAE+gIUy2oSyx/LP8lz+wACAGyBAQjXGPoA0z8wUiSBAQj0WfKnghBkc3RycHSAGMjLBcsCUAXPFlAD+gITy2rLHxLLP8lz+wAACvQAye1UAHgB+gD0BDD4J28iMFAKoSG+8uBQghBwbHVngx6xcIAYUATLBSbPFlj6Ahn0AMtpF8sfUmDLPyDJgED7AAYAilAEgQEI9Fkw7UTQgQFA1yDIAc8W9ADJ7VQBcrCOI4IQZHN0coMesXCAGFAFywVQA88WI/oCE8tqyx/LP8mAQPsAkl8D4gIBIBESAFm9JCtvaiaECAoGuQ+gIYRw1AgIR6STfSmRDOaQPp/5g3gSgBt4EBSJhxWfMYQCAVgTFAARuMl+1E0NcLH4AD2ynftRNCBAUDXIfQEMALIygfL/8nQAYEBCPQKb6ExgAgEgFRYAGa3OdqJoQCBrkOuF/8AAGa8d9qJoQBBrkOuFj8BWioQb"
	assert.Equal(t, expect, signedTx.Tx)
	assert.Equal(t, "43b1fe500eb878b62a712ce7d2591fcf3d3a10e20346543465d24ae7edea3f2f", signedTx.Hash)
}

func TestTransferJetton(t *testing.T) {
	seed, _ := hex.DecodeString("961e76f2e06f689b14002118a96d4a075fdb14f4e82aa3f150a5bd519aa077e9")
	fromJettonAccount := "UQD7w9qG8Cq0PgX0hnp5nVpHPeDYL0QlhcLtjFMmna43sMxz"
	to := "UQC27fdnAFQcQDaXDrR89OKx-lW_Zyxuzcy5CjfPrS9A6vZf"
	amount := "1"
	seqno := uint32(0) // start 0
	pubKey := ed25519.NewKeyFromSeed(seed).Public().(ed25519.PublicKey)
	signedTx, err := TransferJetton(seed, pubKey, fromJettonAccount, to, amount, 9, seqno, "", "1000000", "", "", "jetton test", 1, 1, false, wallet.V4R2)
	assert.Nil(t, err)
	expect := "te6ccgECGAEABBIAA+OIATH7WDPNUXpzvwGS03a5pRDqWtbShlAV8mjFhYUidT9MEY5pNbous8IBc0KISEiDna5zVywCAYWSTZjB8R61mR26xYovo9igzt7uphefSCwvTWGfb8HvOJDzV/ztx3jg7YBlNTRi4AAAACAAAAAAAHABAgMBFP8A9KQT9LzyyAsEAFEAAAAAKamjFxEsUX92r8SQsdh2gZDKGcH7vd+Xue8mtFgzyMG+1EDMQAFoQgB94e1DeBVaHwL6Qz08zq0jnvBsF6ISwuF2ximTTtcb2CAX14QAAAAAAAAAAAAAAAAAAQUCASAGBwDGD4p+pQAAAAAAAAABEBgBbdvuzgCoOIBtLh1o+enFY/Srfs5Y3ZuZchRvn1pegdUAJj9rBnmqL0534DJabtc0oh1LWtpQygK+TRiwsKROp+mGHoSAAAAAAGpldHRvbiB0ZXN0AgFICAkE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8KCwwNAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNDg8CASAQEQBu0gf6ANTUIvkABcjKBxXL/8nQd3SAGMjLBcsCIs8WUAX6AhTLaxLMzMlz+wDIQBSBAQj0UfKnAgBwgQEI1xj6ANM/yFQgR4EBCPRR8qeCEG5vdGVwdIAYyMsFywJQBs8WUAT6AhTLahLLH8s/yXP7AAIAbIEBCNcY+gDTPzBSJIEBCPRZ8qeCEGRzdHJwdIAYyMsFywJQBc8WUAP6AhPLassfEss/yXP7AAAK9ADJ7VQAeAH6APQEMPgnbyIwUAqhIb7y4FCCEHBsdWeDHrFwgBhQBMsFJs8WWPoCGfQAy2kXyx9SYMs/IMmAQPsABgCKUASBAQj0WTDtRNCBAUDXIMgBzxb0AMntVAFysI4jghBkc3Rygx6xcIAYUAXLBVADzxYj+gITy2rLH8s/yYBA+wCSXwPiAgEgEhMAWb0kK29qJoQICga5D6AhhHDUCAhHpJN9KZEM5pA+n/mDeBKAG3gQFImHFZ8xhAIBWBQVABG4yX7UTQ1wsfgAPbKd+1E0IEBQNch9AQwAsjKB8v/ydABgQEI9ApvoTGACASAWFwAZrc52omhAIGuQ64X/wAAZrx32omhAEGuQ64WPwA=="
	assert.Equal(t, expect, signedTx.Tx)
	assert.Equal(t, "6e2d648812164abc418b3f8a6b1b9934ed3533bd2f08feec9760f9e9bb927111", signedTx.Hash)
}

func TestTransferMintlessJetton(t *testing.T) {
	seed, _ := hex.DecodeString("961e76f2e06f689b14002118a96d4a075fdb14f4e82aa3f150a5bd519aa077e9")
	fromJettonAccount := "UQD7w9qG8Cq0PgX0hnp5nVpHPeDYL0QlhcLtjFMmna43sMxz"
	to := "UQC27fdnAFQcQDaXDrR89OKx-lW_Zyxuzcy5CjfPrS9A6vZf"
	amount := "0"
	seqno := uint32(473) // start 0
	pubKey := ed25519.NewKeyFromSeed(seed).Public().(ed25519.PublicKey)
	now := int64(1739482102)
	payload := "te6ccgECLwEABBIAAQgN9gLWAQlGA6+1FWXC4ss/wvDOFwMk2bVM97AUEWqaUhh63uWfQ26nAB4CIgWBcAIDBChIAQEZG2ZqtEYGAq27TvzHdGuGrhhKoICBU+Zg9Xq/qRMHGAAdIgEgBQYiASAHCChIAQEV0tdPcZG01smq0thhsmqf9ZzE0QqpP3c+ERvuHF1JDgAbKEgBAf3dO8qdKoPys7AWvavs1wMNWCOq5XashXaRopmksx/LABsiASAJCiIBIAsMKEgBAWP0xUs9JBrfQRl1FkF2tIfIDYpwLdf3fXqMi6BqxNtmABoiASANDihIAQFOErI5E7ld/nTAgHXdGI74UH8kxIaFyAkH42P54tEC9QAYIgEgDxAoSAEBrF16Czdlg18FB467CrR6Ucwxb8H+Z1e4qDeFWbkz1WEAFyhIAQEHi8q3zQEZfXYwkOhpSzAmR7QK0WmkucDeHV316c8c7QAWIgEgERIoSAEBR2lihAaD6vvRhL/JPmzaQggIKPhOYPFPz+gEDcJwGDEAFSIBIBMUIgEgFRYoSAEBGqLTCRJq5U9xF/0wg6m1Ofz5ajWar7G7OgFmuQNTEo8AEyhIAQHDhe4RDpUKfUvoxXabHqwgzzkeMRsUTXWathAf3eDi+gATIgEgFxgiASAZGihIAQE8uhwFLVCmW7tRL8CsXSPEyW4rSTSrAm3sjMnIORDhfAARIgEgGxwoSAEBYnXkuRcSaZ5EPsepRvY/G1DkCaHSzmWpyNWIW44xbrsAECIBIB0eKEgBAdKemJi3F0hYrXNqx18xFogtSbKwkITtmdyo3Z8iHIa9ABAiASAfIChIAQHe8C8s8ieQWjP9id65wykzkW78REHvWHVr12YzrDAGmQANIgEgISIoSAEBnDka+TCGgaCBt4hXmvS+P+zM6kh/mW16kZioyI5GZDkADChIAQG5/hysJjrmhyOYQIDn1fJm9RlaW/xAL06YgIqRG4V13wAMIgEgIyQoSAEBI+SIgvG4g8IIRDr0RlXbXGJmoxUkPY4mxyxeZe5EbMsACiIBICUmIgEgJygoSAEBma4khVS3h9wAGj5xLOuHvZdOTJhLxz9NuBbu6FLfUTIACShIAQEHUHwoLt9sVpcrmO+6JQ0PYjugfJ5GHOaWCKrzpPvNuQAHIgEgKSoiASArLChIAQHSAWkfu8dj0LoUIVlQtxsFatOZlM/EFv3N5bvK3IwnGQAFKEgBAR8z/6zOlECNrW9yAoHqhYCTTG5sN7xdM3AFFlWWyC4WAAUiASAtLihIAQEMtuRH10MNAMK1Nhd4P/9D/C/3KxQ6aWqXvx9q648OEgABAF66mxs4l01wvQnrWl46By9vMuy9cGycLoc7pgt8sy+0O5rKAAAAZuDdgAAAZvVa0A=="
	stateInit := "te6ccgEBAwEAjwACATQBAghCAg7xnhv0Dyukkvyqw4buylm/aCejhQcI2fzZrbaDq8M2AMoAgBRoNbY2cS6a4XoT1rS8dA5e3mXZeuDZOF0Od0wW+WZfcAPpn0MdzkzH7w8jwjgGMZfR3Y2FqlpEArXYKCy3B42gyr7UVZcLiyz/C8M4XAyTZtUz3sBQRappSGHre5Z9DbqcAQ=="

	signedTx, err := TransferJetton(seed, pubKey, fromJettonAccount, to, amount, 9, seqno, "100000000", "1", payload, stateInit, "", now, 1, false, wallet.V4R2)
	assert.Nil(t, err)
	expect := "te6ccgECNAEABZ4AAeGIATH7WDPNUXpzvwGS03a5pRDqWtbShlAV8mjFhYUidT9MBAbRy1grq1YaCD4Drxt/kYeqEqY1UvouoLpgZiX017UoQXpcfoSBXN8baOEyPzaJzO6uXCSo1Boj4T1SvStn0FFNTRi7PXMfsAAADsgAHAEDaUIAfeHtQ3gVWh8C+kM9PM6tI57wbBeiEsLhdsYpk07XG9ggL68IAAAAAAAAAAAAAAAAAAI2AgMECEICDvGeG/QPK6SS/KrDhu7KWb9oJ6OFBwjZ/NmttoOrwzYAygCAFGg1tjZxLprhehPWtLx0Dl7eZdl64Nk4XQ53TBb5Zl9wA+mfQx3OTMfvDyPCOAYxl9HdjYWqWkQCtdgoLLcHjaDKvtRVlwuLLP8LwzhcDJNm1TPewFBFqmlIYet7ln0NupwBAaIPin6lAAAAAAAAAAEIAW3b7s4AqDiAbS4daPnpxWP0q37OWN2bmXIUb59aXoHVACY/awZ5qi9Od+AyWm7XNKIdS1raUMoCvk0YsLCkTqfpogIFAQgN9gLWBglGA6+1FWXC4ss/wvDOFwMk2bVM97AUEWqaUhh63uWfQ26nAB4HIgWBcAIICShIAQEZG2ZqtEYGAq27TvzHdGuGrhhKoICBU+Zg9Xq/qRMHGAAdIgEgCgsiASAMDShIAQEV0tdPcZG01smq0thhsmqf9ZzE0QqpP3c+ERvuHF1JDgAbKEgBAf3dO8qdKoPys7AWvavs1wMNWCOq5XashXaRopmksx/LABsiASAODyIBIBARKEgBAWP0xUs9JBrfQRl1FkF2tIfIDYpwLdf3fXqMi6BqxNtmABoiASASEyhIAQFOErI5E7ld/nTAgHXdGI74UH8kxIaFyAkH42P54tEC9QAYIgEgFBUoSAEBrF16Czdlg18FB467CrR6Ucwxb8H+Z1e4qDeFWbkz1WEAFyhIAQEHi8q3zQEZfXYwkOhpSzAmR7QK0WmkucDeHV316c8c7QAWIgEgFhcoSAEBR2lihAaD6vvRhL/JPmzaQggIKPhOYPFPz+gEDcJwGDEAFSIBIBgZIgEgGhsoSAEBGqLTCRJq5U9xF/0wg6m1Ofz5ajWar7G7OgFmuQNTEo8AEyhIAQHDhe4RDpUKfUvoxXabHqwgzzkeMRsUTXWathAf3eDi+gATIgEgHB0iASAeHyhIAQE8uhwFLVCmW7tRL8CsXSPEyW4rSTSrAm3sjMnIORDhfAARIgEgICEoSAEBYnXkuRcSaZ5EPsepRvY/G1DkCaHSzmWpyNWIW44xbrsAECIBICIjKEgBAdKemJi3F0hYrXNqx18xFogtSbKwkITtmdyo3Z8iHIa9ABAiASAkJShIAQHe8C8s8ieQWjP9id65wykzkW78REHvWHVr12YzrDAGmQANIgEgJicoSAEBnDka+TCGgaCBt4hXmvS+P+zM6kh/mW16kZioyI5GZDkADChIAQG5/hysJjrmhyOYQIDn1fJm9RlaW/xAL06YgIqRG4V13wAMIgEgKCkoSAEBI+SIgvG4g8IIRDr0RlXbXGJmoxUkPY4mxyxeZe5EbMsACiIBICorIgEgLC0oSAEBma4khVS3h9wAGj5xLOuHvZdOTJhLxz9NuBbu6FLfUTIACShIAQEHUHwoLt9sVpcrmO+6JQ0PYjugfJ5GHOaWCKrzpPvNuQAHIgEgLi8iASAwMShIAQHSAWkfu8dj0LoUIVlQtxsFatOZlM/EFv3N5bvK3IwnGQAFKEgBAR8z/6zOlECNrW9yAoHqhYCTTG5sN7xdM3AFFlWWyC4WAAUiASAyMyhIAQEMtuRH10MNAMK1Nhd4P/9D/C/3KxQ6aWqXvx9q648OEgABAF66mxs4l01wvQnrWl46By9vMuy9cGycLoc7pgt8sy+0O5rKAAAAZuDdgAAAZvVa0A=="
	assert.Equal(t, expect, signedTx.Tx)
	assert.Equal(t, "b2e387929ba6a2b08da88ac1cdf690f71163fa9c4059813a3a6562d1b9cfc62a", signedTx.Hash)
}

func TestCalTxHash(t *testing.T) {
	boc := "te6cckECCgEAAcMAAeGIAFj4Q0XnjCz5PaCmffX7LoD3fW0u23rLm2iS7OiPTb++Aa4Ryjk9tmvjfp0/T7qN/6XH2pvGPXWVA49KyUFwBTMaJQPaH5K7c+JF2EtW6pi+YAmaa9z1jty0XFk0ik09ECFNTRi7QzjRyAAAAAgAHAEEgWIAL3x2MA2Hkw8ANLbT8LnXO1PbxcFPjtQmAqnkxUPN9hegcPCv0AAAAAAAAAAAAAAAAACrze8TAAAAAAAAAADwAgMEBQID0AgGBwCAz5OLCwJUe6jC2zBOxTIAbNEbhl5Uyb9RzPXc23q5rvUKIeaWu+U+GA3X2x/2JMYzN9aG8+wWaDj1tKgJqRMxDACAJomsdXOD9V1dherAPhvpta+dSdW5lZadUxeQsZ9cut8rP2o5Oz9WYSaCtL6T5zmXuBRnEb+j11levBeOUxcZAABDgAKjUGeyXpSFlLMK+sUSa+N+F055IaK07JfoUwXa+lbLSAEBIAgBASAJAE6ABuBXrm5cCldCCudzpcXEdP7Hd9o3iQ7TZAdYv544RXiqAlQL5AAAToAa18Cpqpt0vH1t6e1WvLApomKv5aCwyokOInEYhKrZfKoFloLwADrVB6o="

	hash, err := CalTxHash(boc)
	assert.Nil(t, err)
	assert.Equal(t, "2dc368fb446f6e2251bc408f673e40d730a77cf9632d70235f365936042a99da", hash)

	normHash, err := CalNormMsgHash(boc)
	assert.Nil(t, err)
	assert.Equal(t, "716b7272ac30e7afb0819a52646da0445c009386db2a4f2e64164468afbd7291", normHash)
}
